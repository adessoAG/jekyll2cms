package de.adesso.service;

import org.apache.commons.io.FilenameUtils;
import org.eclipse.jgit.diff.DiffEntry;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;

/**
 * This service helps managing repositories with the help of JGit.
 */
@Service
public class MarkdownTransformer {

	private static final Logger LOGGER = LoggerFactory.getLogger(MarkdownTransformer.class);

	@Value("${repository.local.path}")
	private String LOCAL_REPO_PATH;

	@Value("${repository.remote.url}")
	private String REMOTE_REPO_URL;

	@Value("${repository.local.htmlposts.path}")
	private String LOCAL_HTML_POSTS;

	@Value("${repository.local.firstspirit-xml.path}")
	private String FIRSTSPIRIT_XML_PATH;

	@Value("${repository.local.JSON.path}")
	private String JSON_PATH;

	/**
	 * After a change in a markdown post was detected, the jekyll-build process
	 * generates html and xml files to the corresponding markdown file. The xml
	 * output has to be copied to an intended folder
	 *
	 * @param entries
	 *            List with all changed files
	 */
    protected void copyGeneratedXmlFiles(List<DiffEntry> entries) {

		entries.forEach((entry) -> {

			String [] splitFilePath;
			/*
			 * Assumption: every-blog- post-file with ending "markdown" has the following
			 * structure: _posts/2017-08-01-new-post-for-netlify-test.markdown
			 */
			/*
			 * Before getting the file Name
			 * Evaluation if the data is an deleted Data
			 */
			if(entry.getChangeType() == DiffEntry.ChangeType.DELETE){

				LOGGER.info("Found deleted Post!");
				/*
				 * separate "_posts" or other folders for example the folders for the categorie
				 * from "2017-08-01-new-post-title.markdown" in
				 * file path
				 */
				splitFilePath = entry.getOldPath().split("([\\/\\.])", 3);
				LOGGER.info("The File to be deleted: "+entry.getOldPath());
			}
			else {
				splitFilePath = entry.getNewPath().split("([\\/\\.])", 3);
			}

			/*
			 * only if changed file is in folder "_posts", then a post defined in markdown
			 * was created or updated; other files are ignored
			 */
			if (splitFilePath[0].equals("_posts")) {

				String fileDate = LocalDate.now().toString();

				/*
				 * Get date "2017-08-01" from file name
				 * "2017-08-01-new-post-title.markdown"
				 */
				String fileName = splitFilePath[splitFilePath.length-2];
				Pattern pattern = Pattern.compile("(\\d+-){3}");
				Matcher m = pattern.matcher(fileName);

				if (m.find())
				{
					fileDate = fileName.substring(m.start(), m.end()-1);
					fileName = fileName.substring(m.end());
				}

				/*
				 * The part of the file name which is not the date is the file name of the
				 * jekyll xml built. The following method call extracts the file name
				 * "new-post-for-netlify-test.xml" from
				 * "2017-08-01-new-post-title.markdown"
				 */
				String xmlFileName = fileName + ".xml";

				/*
				 * The Jeykyll xml built is located at
				 * "/_site/blog-posts/2017-08-01/new-post-title/2017-08-01-new-post-title.xml
				 */
				File source = new File(String.format("%s/%s/%s/%s",LOCAL_HTML_POSTS, fileDate, fileName, xmlFileName));
				File dest = new File(String.format("%s/%s/%s-%s", FIRSTSPIRIT_XML_PATH, fileDate, fileDate, xmlFileName ));
				Path dirPath = new File(String.format("%s/%s",FIRSTSPIRIT_XML_PATH, fileDate)).toPath();

				if(entry.getChangeType()== DiffEntry.ChangeType.DELETE)
				{
					try {
						Files.delete(dest.toPath());
						/* Checking if the directory of the File is empty
						 * Then delete it
						 */
						if(!Files.newDirectoryStream(dirPath).iterator().hasNext()){
							Files.delete(dirPath);
						}
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				else{
					this.copyFile(source, dest);
				}
			}
		});
	}

	/**
	 * Copy all XML files that were generated by jekyll.
	 * This method is useful after starting and initializing the application
	 */
	public void copyAllGeneratedXmlFiles() {
		Collection<File> allFiles = new ArrayList<File>();
		File file = new File(LOCAL_HTML_POSTS);
		scanDirectory(file, allFiles);
		/*
		 * Filter: take only XML-files - other files will be ignored
		 */
		allFiles.stream().filter(File::isFile).filter((f) -> {
			return FilenameUtils.getExtension(f.getAbsolutePath()).equals("xml");
		}).forEach((f) -> {
			String fileDate = FilenameUtils.getBaseName(new File(f.getParent()).getParent());
			File dest = new File(
					/*
					 * XML File located at
					 * "_site/blog-posts/2016-05-12/welcome-to-jekyll/welcome-to-jekyll.xml" and is
					 * desired to be copied to
					 * "assets/first-spirit-xml/2016-05-12-welcome-to-jekyll"
					 */
					FIRSTSPIRIT_XML_PATH + "/" + fileDate + "/" + fileDate + "-"
							+ FilenameUtils.getBaseName(f.getAbsolutePath() + ".xml"));
			this.copyFile(f, dest);
		});
	}

	/**
	 * Auxiliary-method for copyAllGeneratedXmlFiles() - a file directory will be
	 * scanned and all files are collected
	 *
	 * @param file
	 *            root directory - scan starts here
	 * @param all
	 *            Collection where results are added to
	 */
	private void scanDirectory(File file, Collection<File> all) {
		File[] children = file.listFiles();
		if (children != null) {
			for (File child : children) {
				all.add(child);
				scanDirectory(child, all);
			}
		}
	}

	/**
	 * Copy a file
	 *
	 * @param source
	 *            Source of the file
	 * @param dest
	 *            Destination of the file
	 */
	private void copyFile(File source, File dest) {
		try {
			if (source.lastModified() != dest.lastModified()) {
				LOGGER.info("Copy file from " + source.getAbsolutePath() + " to " + dest.getAbsolutePath());
				if (!dest.exists()) {
					dest.getParentFile().mkdir();
				}
				Files.copy(source.toPath(), dest.toPath(), StandardCopyOption.REPLACE_EXISTING,
						StandardCopyOption.COPY_ATTRIBUTES);
				/*
				 * Deletes all XML-Files in the
				 * _site/blog-posts/... folder
				 */
				this.deleteXmlFromSiteFolder();

			}
		} catch (IOException e) {
			LOGGER.error("An error occured while copying generated XML files to destinantion");
		}
	}

	/*
	 * New: 2017-08-18
	 * Function to delete all the XML-Files
	 * from the _site/blog-post/YYYY-MM_DD/...
	 * Folder
	 */
	private void deleteXmlFromSiteFolder(){
		try(Stream<Path> stream = Files.find(Paths.get(LOCAL_HTML_POSTS),5,
				(path, attr)-> path.getFileName().toString().endsWith(".xml") )){
			stream.forEach(path ->{
				try {
					Files.delete(path);
				} catch (IOException e) {
					e.printStackTrace();
				}
			});
		}
		catch (IOException e){
			e.printStackTrace();
		}
	}
}
